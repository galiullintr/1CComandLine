
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализацияФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТЧОписаниеСтрокиЗапуска

&НаКлиенте
Процедура ОписаниеСтрокиЗапускаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОписаниеСтрокиЗапускаЗначение.СписокВыбора.Очистить();
	Элементы.ОписаниеСтрокиЗапускаЗначение.РежимВыбораИзСписка = Ложь;
	Элементы.ОписаниеСтрокиЗапускаЗначение.КнопкаВыбора        = Ложь;
	Элементы.ОписаниеСтрокиЗапускаЗначение.ТолькоПросмотр      = Ложь;
	
	Если СтрНайти(Элемент.ТекущиеДанные.ТипЗначенияПараметра, "Каталог") = 1
	 Или СтрНайти(Элемент.ТекущиеДанные.ТипЗначенияПараметра, "Файл") = 1 Тогда
		
		Элементы.ОписаниеСтрокиЗапускаЗначение.КнопкаВыбора = Истина;
		
	ИначеЕсли Элемент.ТекущиеДанные.СписокЗначений.Количество() > 0 Тогда
		
		Элементы.ОписаниеСтрокиЗапускаЗначение.РежимВыбораИзСписка = Истина;
				
		Для Каждого ЭлементСписка Из Элемент.ТекущиеДанные.СписокЗначений Цикл
			
			Элементы.ОписаниеСтрокиЗапускаЗначение.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			
		КонецЦикла;
		
	ИначеЕсли Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТипЗначенияПараметра) Тогда
		
		Элементы.ОписаниеСтрокиЗапускаЗначение.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеСтрокиЗапускаЗначениеПриИзменении(Элемент)
	
	ОписаниеСтрокиЗапускаЗначениеПриИзмененииНаСервере(Элементы.ОписаниеСтрокиЗапуска.ТекущаяСтрока);
	
	Элементы.ОписаниеСтрокиЗапуска.Развернуть(Элементы.ОписаниеСтрокиЗапуска.ТекущаяСтрока, Истина);
	РазвернутьОтмеченные(Элементы.ОписаниеСтрокиЗапуска.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеСтрокиЗапускаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Элементы.ОписаниеСтрокиЗапуска.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Элементы.ОписаниеСтрокиЗапуска.ТекущиеДанные.ТипЗначенияПараметра, "Каталог") = 1 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВыборКаталога(Элементы.ОписаниеСтрокиЗапуска.ТекущаяСтрока);
		
	ИначеЕсли СтрНайти(Элементы.ОписаниеСтрокиЗапуска.ТекущиеДанные.ТипЗначенияПараметра, "Файл") = 1 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВыбораФайла = СтрРазделить(Элементы.ОписаниеСтрокиЗапуска.ТекущиеДанные.ТипЗначенияПараметра, ";");

		ПоказатьВыборФайла(Элементы.ОписаниеСтрокиЗапуска.ТекущаяСтрока, ПараметрыВыбораФайла);
		
	КонецЕсли;
	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеСтрокиЗапускаИспользованиеПриИзменении(Элемент)
	
	ОписаниеСтрокиЗапускаИспользованиеПриИзмененииНаСервере(Элементы.ОписаниеСтрокиЗапуска.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗапускПриложения(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
	
	НачатьЗапускПриложения(ОписаниеОповещения, СтрокаКоманды,, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияФормы()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ПрочитатьМакет(ЭтотОбъект, "ОписаниеЗначенийПараметров");
	ОбработкаОбъект.ПрочитатьМакет(ЭтотОбъект, "ОписаниеРазделов");
	
	КоллекцияСтрок = ОписаниеСтрокиЗапуска.ПолучитьЭлементы();
	
	//СтруктураПоиска = Новый Структура;
	//СтруктураПоиска.Вставить("Раздел", "Режим запуска");
	
	//МассивСтрок = ОписаниеРазделов.НайтиСтроки(СтруктураПоиска);
	
	НоваяСтрока              = КоллекцияСтрок.Добавить();
	//НоваяСтрока.Наименование = "Режим запуска";
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеРазделов[0]);
	
	ПрочитатьОписаниеЗначенийПараметра(НоваяСтрока);
	
	УстановитьИспользование(НоваяСтрока, НоваяСтрока.Использование);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОписаниеЗначенийПараметра(ОписаниеПараметра)
	
	ОписаниеПараметра.СписокЗначений.Очистить();
	
	Если ОписаниеПараметра.ТипЗначенияПараметра = "Перечисление" Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Наименование", ОписаниеПараметра.Раздел);
		
		МассивСтрок = ОписаниеЗначенийПараметров.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Стр Из МассивСтрок Цикл
			
			Если Не ЗначениеДоступно(ОписаниеПараметра, Стр.ОтборЗначений) Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеПараметра.СписокЗначений.Добавить(Стр.Ссылка, Стр.Представление);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ЗначениеДоступно(ОписаниеПараметра, ОтборЗначений)
	
	Если Не ЗначениеЗаполнено(ОтборЗначений) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Родитель = ОписаниеПараметра.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Родитель.Значение)
	   И СтрНайти(ОтборЗначений, Родитель.Значение) > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат ЗначениеДоступно(Родитель, ОтборЗначений);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьПодчиненныеПараметрыРекурсивно(ОписаниеПараметра, Знач Значение)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Родитель", ОписаниеПараметра.Раздел);
	
	МассивСтрок = ОписаниеРазделов.НайтиСтроки(СтруктураПоиска);
	
	КоллекцияСтрок = ОписаниеПараметра.ПолучитьЭлементы();
	КоллекцияСтрок.Очистить();
		
	Для Каждого Стр Из МассивСтрок Цикл
		
		//Если Не ОписаниеПараметра.Использование
		//   И (ЗначениеЗаполнено(Стр.ТипЗначенияПараметра)
		//  Или ЗначениеЗаполнено(Стр.Опция)) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.ОтборПоЗначению)
			И (Не ЗначениеЗаполнено(Значение)
		  Или СтрРазделить(СтрЗаменить(Стр.ОтборПоЗначению, " ", ""), ",").Найти(Значение) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока                                 = КоллекцияСтрок.Добавить();
		НоваяСтрока.Наименование                    = Стр.Наименование;
		НоваяСтрока.Раздел                          = Стр.Раздел;
		НоваяСтрока.ТипЗначенияПараметра            = Стр.ТипЗначенияПараметра;
		НоваяСтрока.Опция                           = Стр.Опция;
		НоваяСтрока.РазрешеноКопирование            = Стр.РазрешеноКопирование;
		НоваяСтрока.ПроверкаЗаполнения              = Стр.ПроверкаЗаполнения;
		НоваяСтрока.Автоиспользование               = Стр.Автоиспользование;
		НоваяСтрока.ИспользоватьПробел              = Не Стр.БезПробелов;
		НоваяСтрока.ИспользоватьКавычки             = Стр.Кавычки;
		НоваяСтрока.ИспользоватьКавычкиДляЗначения  = Стр.КавычкиДляЗначения;
		НоваяСтрока.Описание                        = Стр.Описание;
		
		ПрочитатьОписаниеЗначенийПараметра(НоваяСтрока);
		
		Если НоваяСтрока.ТипЗначенияПараметра = "Перечисление"
		   И НоваяСтрока.СписокЗначений.Количество() = 0 Тогда
		    КоллекцияСтрок.Удалить(НоваяСтрока);
			Продолжить;
	   	КонецЕсли;
	   
		ОбновитьПодчиненныеПараметрыРекурсивно(НоваяСтрока, ?(ЗначениеЗаполнено(Значение(ОписаниеПараметра)), Значение(ОписаниеПараметра), Значение));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОписаниеСтрокиЗапускаЗначениеПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Если ТипЗнч(ИдентификаторСтроки) <> Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ОписаниеСтрокиЗапуска.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Представление = "";
	
	Если ТекущаяСтрока.СписокЗначений.Количество() > 0 Тогда
		
		ЭлементСписка = ТекущаяСтрока.СписокЗначений.НайтиПоЗначению(ТекущаяСтрока.Значение);
		
		Если ЭлементСписка <> Неопределено Тогда
			ТекущаяСтрока.Представление = ЭлементСписка.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтрока.Использование = Истина;
	
	ОбновитьПодчиненныеПараметрыРекурсивно(ТекущаяСтрока, Значение(ТекущаяСтрока));
		
	УстановитьИспользование(ТекущаяСтрока, ТекущаяСтрока.Использование);
	
	ОбновитьСтрокуКоманды();

КонецПроцедуры

&НаСервере
Процедура УстановитьИспользование(Знач ТекущаяСтрока, Знач Использование);

	Если ТипЗнч(ТекущаяСтрока) <> Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИспользованиеВышестоящих(Использование, ТекущаяСтрока);
	
	УстановитьИспользованиеПодчиненных(ТекущаяСтрока.ПолучитьЭлементы(), Использование);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеВышестоящих(Знач Использование, Знач ТекущаяСтрока)
	
	Перем КоллекцияСтрок, Родитель, Стр;
	
	Родитель = ТекущаяСтрока;
	
	Пока Истина Цикл
		
		Родитель = Родитель.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Если Использование Тогда
			Родитель.Использование = Истина;
		Иначе
			
			Родитель.Использование = Ложь;
			
			КоллекцияСтрок = Родитель.ПолучитьЭлементы();
			
			Для Каждого Стр Из КоллекцияСтрок Цикл
				
				Если Стр.Использование Тогда
					Родитель.Использование = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьИспользованиеПодчиненных(Родитель.ПолучитьЭлементы(), Родитель.Использование);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеПодчиненных(КоллекцияСтрок, Использование)
	
	Для Каждого Стр Из КоллекцияСтрок Цикл
		
		Если Стр.Автоиспользование Или Не Использование Тогда
			Стр.Использование = Использование;
		КонецЕсли;
		
		УстановитьИспользованиеПодчиненных(Стр.ПолучитьЭлементы(), Стр.Использование);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьОтмеченные(ИдентификаторСтроки)
	
	ТекущаяСтрока  = ОписаниеСтрокиЗапуска.НайтиПоИдентификатору(ИдентификаторСтроки);
	КоллекцияСтрок = ТекущаяСтрока.ПолучитьЭлементы();
	
	Для Каждого Стр Из КоллекцияСтрок Цикл
		
		Если Стр.Использование Тогда
			Элементы.ОписаниеСтрокиЗапуска.Развернуть(Стр.ПолучитьИдентификатор());
		Иначе
			Элементы.ОписаниеСтрокиЗапуска.Свернуть(Стр.ПолучитьИдентификатор());
		КонецЕсли;
		
		РазвернутьОтмеченные(Стр.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборКаталога(ИдентификаторСтроки)
		
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтотОбъект, ПараметрыОповещения);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборФайла(ИдентификаторСтроки, ПараметрыВыбораФайла)
	
	ТекущаяСтрока = ОписаниеСтрокиЗапуска.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтотОбъект, ПараметрыОповещения);
	
	Диалог        = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла[ПараметрыВыбораФайла[1]]);
	Диалог.Фильтр = ПараметрыВыбораФайла[2];
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла(МассивФайлов, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(МассивФайлов) <> Тип("Массив")
	 Или МассивФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ОписаниеСтрокиЗапуска.НайтиПоИдентификатору(ПараметрыОповещения.ИдентификаторСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Значение = МассивФайлов[0];
	
	ОписаниеСтрокиЗапускаЗначениеПриИзмененииНаСервере(ПараметрыОповещения.ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ОписаниеСтрокиЗапускаИспользованиеПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Если ТипЗнч(ИдентификаторСтроки) <> Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ОписаниеСтрокиЗапуска.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПодчиненныеПараметрыРекурсивно(ТекущаяСтрока, Значение(ТекущаяСтрока));
	
	УстановитьИспользование(ТекущаяСтрока, ТекущаяСтрока.Использование);
	
	ОбновитьСтрокуКоманды();
		
КонецПроцедуры

&НаСервере
Функция Значение(ТекущаяСтрока)

	Если ЗначениеЗаполнено(ТекущаяСтрока.ТипЗначенияПараметра) Тогда
		Возврат ТекущаяСтрока.Значение;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.Опция) Тогда
		Возврат ТекущаяСтрока.Опция;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ОбновитьСтрокуКоманды()
	
	СтрокаКоманды = """C:\Program Files (x86)\1cv8\common\1cestart.exe""" + ПолучитьСтрокуЗапуска(ОписаниеСтрокиЗапуска.ПолучитьЭлементы());

КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуЗапуска(КоллекцияСтрок, ИспользоватьПробел = Истина, ИспользоватьКавычки = Ложь)
	
	СтрокаЗапуска = "";
		
	Пробел = ?(ИспользоватьПробел, " ", "");
	
	Для Каждого Стр Из КоллекцияСтрок Цикл
		
		Если Не Стр.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.Опция) Тогда
			СтрокаЗапуска = СтрокаЗапуска + Пробел + Стр.Опция;
		КонецЕсли;
		
		Если Стр.ТипЗначенияПараметра = "Перечисление" И ЗначениеЗаполнено(Стр.Значение) Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Ссылка", Стр.Значение);
			
			МассивСтрок = ОписаниеЗначенийПараметров.НайтиСтроки(СтруктураПоиска);
			
			Значение = МассивСтрок[0].Значение;
			
		Иначе
			Значение = Стр.Значение;
		КонецЕсли;
		
		Если Значение = "Неопределено" Тогда
		ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
			
			Если Стр.ИспользоватьКавычкиДляЗначения Тогда
				Кавычки = """";
			Иначе
				Кавычки = "";
			КонецЕсли;
			
			СтрокаЗапуска = СтрокаЗапуска + ?(Стр.ИспользоватьПробел, " ", "") + Кавычки + Значение + Кавычки;
		КонецЕсли;
		
		СтрокаЗапуска = СтрокаЗапуска + ПолучитьСтрокуЗапуска(Стр.ПолучитьЭлементы(), Стр.ИспользоватьПробел, Стр.ИспользоватьКавычки);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СтрокаЗапуска) Тогда
	ИначеЕсли ИспользоватьКавычки Тогда
		СтрокаЗапуска = " """ + СтрЗаменить(СокрЛП(СтрокаЗапуска), """", """""") + """";
	Иначе
		СтрокаЗапуска = " " + СокрЛП(СтрокаЗапуска);
	КонецЕсли;
	
	Возврат СтрокаЗапуска;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗапускаПриложения(КодВозврата, ПараметрыОповещения) Экспорт
	
	ПоказатьОповещениеПользователя("Приложение запущено");
	
КонецПроцедуры

#КонецОбласти
